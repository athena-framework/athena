name: Sync

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false # ensure back-to-back merges don't cancel an in-progress sync

jobs:
  # Sync changes in the merged PR to the component specific repos.
  sync:
    runs-on: ubuntu-latest
    outputs:
      updated_components: ${{ steps.subtree-sync.outputs.updated_components }}
      kind_docs: ${{ steps.subtree-sync.outputs.kind_docs }}
      kind_release: ${{ steps.subtree-sync.outputs.kind_release }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Required so `git subtree` can find its split commit
          ssh-key: ${{ secrets.ATHENA_BOT_SSH_PRIV_KEY }}
      - name: Sync Components
        id: subtree-sync
        env:
          GH_TOKEN: ${{ github.token }}
          BEFORE_SHA: ${{ github.event.before }}
          AFTER_SHA: ${{ github.event.after }}
        run: |
          set -euo pipefail

          UPDATED_COMPONENTS=()

          for componentName in $(find src/components/ -maxdepth 2 -type f -name shard.yml | xargs -I{} dirname {} | xargs -I{} basename {} | sort); do
            # The git repos uses hyphens instead of underscores.
            REPO_NAME=$(echo "$componentName" | tr '_' '-')
            REPO_URL="git@github.com:athena-framework/$REPO_NAME.git"
            COMPONENT_DIR="src/components/$componentName"

            if ! $(git diff --quiet --exit-code $BEFORE_SHA $AFTER_SHA -- "$COMPONENT_DIR"); then
              echo "Syncing: $REPO_NAME"
              git remote add $componentName $REPO_URL &> /dev/null || true
              git fetch --quiet $componentName
              git subtree push --prefix="$COMPONENT_DIR" "$componentName" "master"

              UPDATED_COMPONENTS+=("\"$REPO_NAME\"")
            fi
          done

          JSON_ARR=$(IFS=,; echo "[${UPDATED_COMPONENTS[*]}]")
          echo "Changed components: $JSON_ARR"
          echo "updated_components=$JSON_ARR" >> "$GITHUB_OUTPUT"

          PR_LABELS=$(gh api --jq '.[0].labels | map(.name)' /repos/athena-framework/athena/commits/${{ github.event.after }}/pulls)

          IS_KIND_DOCUMENTATION=$([ "null" != "$(jq 'index("kind:documentation")' <<< $PR_LABELS)" ] && echo "true" || echo "false")
          IS_KIND_RELEASE=$([ "null" != "$(jq 'index("kind:release")' <<< $PR_LABELS)" ] && echo "true" || echo "false")

          echo "kind_docs=$IS_KIND_DOCUMENTATION" >> "$GITHUB_OUTPUT"
          echo "kind_release=$IS_KIND_RELEASE" >> "$GITHUB_OUTPUT"

  # Cherry picks changes into `docs` branch of each changed component(s) for PRs with the `kind:documentation` label
  pick-docs:
    runs-on: ubuntu-latest
    needs:
      - sync
    if: needs.sync.outputs.updated_components != '[]' && needs.sync.outputs.kind_docs == 'true'
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.sync.outputs.updated_components) }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: athena-framework/${{ matrix.component }}
          ref: docs
          ssh-key: ${{ secrets.ATHENA_BOT_SSH_PRIV_KEY }}
      - name: Cherry pick commit
        run: |
          set -euo pipefail

          git config user.name "${{ vars.BOT_USER_NAME }}"
          git config user.email "${{ vars.BOT_USER_EMAIL }}"

          NEW_COMMIT=$(git ls-remote "git@github.com:athena-framework/${{ matrix.component }}.git" HEAD | awk '{ print $1}')
          git fetch origin $NEW_COMMIT
          git cherry-pick $NEW_COMMIT
          git push origin docs

  # If there were component related doc updates, trigger a re-build after all components were synced.
  build-component-docs:
    runs-on: ubuntu-latest
    needs:
      - sync # This needs to also depend on `sync` so we cn use its outputs even if it's redundant because of the dependency on `pick-docs`.
      - pick-docs
    if: needs.sync.outputs.kind_docs == 'true' && needs.sync.outputs.updated_components != '[]'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - run: gh workflow run release.yml
        env:
          GH_TOKEN: ${{ github.token }}

  # If there were no component related doc updates, simply trigger a re-build after `sync` job to handle updates to the root docs.
  build-root-docs:
    runs-on: ubuntu-latest
    needs:
      - sync
    if: needs.sync.outputs.kind_docs == 'true' && needs.sync.outputs.updated_components == '[]'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - run: gh workflow run release.yml
        env:
          GH_TOKEN: ${{ github.token }}

  # Build and deploy a development version of the docs to allow viewing docs for all un-released changes in `master`
  build-dev-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.MKDOCS_INSIDERS_SSH_PRIV_KEY }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3.0.0
      - name: Install Crystal
        uses: crystal-lang/install-crystal@cdf26dcd488490c9939e9d4d62cab169c9e4f20d # v1.8.2
      - name: Install Components
        run: shards install --without-development
        env:
          SHARDS_OVERRIDE: shard.dev.yml
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.x
      - name: Build Docs
        run: just build-docs
      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65 # v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./site --project-name=athenaframework --branch=dev
